explain (VERBOSE, COSTS OFF)
select n.name, n.class, v.additional, count(value) as count
FROM test_name n, test_value v
WHERE n.id1 = v.id1 and n.id2 = v.id2
GROUP BY n.name, n.class, v.additional;
                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: n.name, n.class, v.additional, (count(v.value))
   Relations: Aggregate on ((public.test_name n) INNER JOIN (public.test_value v))
   Remote SQL: SELECT r1.name, r1.class, r2.additional, count(r2.value) FROM (public.test_name r1 INNER JOIN public.test_value r2 ON (((r1.id1 = r2.id1)) AND ((r1.id2 = r2.id2)))) GROUP BY r1.name, r1.class, r2.additional
(4 rows)

-- FIXME: the above doesn't select the MV, most likely because the MV doesn't list the WHERE clause params in its tList, hence it is not possible for the vars to match up (when run with "server loopback options (add log_match_progress 'true')", it notes: "check_from_join_clauses_for_matview: expression not found in grouped rel: {OPEXPR :opno 1752 :opfuncid 1718 :opresulttype 16 :opretset false :opcollid 0 :inputcollid 0 :args ({VAR :varno 1 :varattno 1 :vartype 1700 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location 137} {VAR :varno 2 :varattno 1 :vartype 1700 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 2 :varoattno 1 :location 145}) :location 143}")'
--select n.name, n.class, v.additional, count(value) as count
--FROM test_name n, test_value v
--WHERE n.id1 = v.id1 and n.id2 = v.id2
--GROUP BY n.name, n.class, v.additional;
